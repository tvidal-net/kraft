buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    group 'uk.tvidal'
    version '0.1-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'kotlin'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = project.targetCompatibility
            // allWarningsAsErrors = true
        }
    }

    test {
        useJUnitPlatform()
        systemProperty 'logback.configurationFile', 'logback-console.xml'
    }

    dependencies {

        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

        // JUnit
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

        // MockK
        testImplementation "io.mockk:mockk:$mockkVersion"

        // Log
        testRuntimeOnly "org.slf4j:slf4j-api:$slf4jVersion"
        testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"

        // add :kraft-core:testRuntime to all other subprojects
        if (name != 'kraft-test') {
            testImplementation project(':kraft-test')
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            preferProjectModules()
        }
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Vendor': project.group,
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
            )
        }
        zip64 true
    }

    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        testJar
    }
}
